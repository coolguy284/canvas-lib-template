CanvasManager notes:
  for full screen shader mode, some special variables are present in the fragment shader:
    vec2 gl_FragCoord:
      intrinsic to OpenGL, contains the x and y coordinate of the current pixel as floats, in pixels, not -1 to 1 normalized.
    vec2 u_resolution:
      set by CanvasManager, contains the width and height of the canvas as floats
    vec2 <sampler2d name>_resolution:
      set by CanvasManager, contains the width and height of the image referred to by the sampler2d as floats
    vec2 <sampler2d[] name>_resolution[]:
      set by CanvasManager, contains the width and height of each image in the sampler2d array as floats

definitions:
  nullish: null/undefined/missing

CanvasManager > setMode:
  {
    mode: CanvasMode | nullish (default CanvasMode.NONE),
    if mode != CanvasMode.NONE:
      triggers: {
        setup: <function() -> undefined; called to set up variables> | nullish,
        render: <function() -> undefined; called every render> | nullish,
        tearDown: <function() -> undefined; called to tear down variables> | nullish,
      } | nullish,
      frameRate: {
        mode: FrameRateMode,
        if mode == FrameRateMode.FRAME_MULT:
          frameSkips: <integer >= 0>,
        if mode == FrameRateMode.MILLISECOND:
          delay: <integer milliseconds > 0>,
      } | nullish (only allowed if triggers.render == nullish; default { mode: FrameRateMode.NONE }),
    if mode == CanvasMode.WEBGL_FULL_CANVAS_SHADER:
      shaderSegments: [
        {
          type: ShaderSegmentType,
          if type == ShaderSegmentType.STRING:
            content: <string>,
          if type == ShaderSegmentType.URL:
            url: <relative or absolute url string>,
        },
        ...
      ],
      uniforms: [
        <glsl variable string i.e. "vec2 variableName[2]">
        OR
        {
          name: <string>,
          type: UniformType,
          if type endswith _ARRAY:
            length: <integer>,
        },
      ] | nullish,
  } | null (default {})

SettingsManager > constructor:
  {
    button: HTMLElement (button for toggling settings),
    div: HTMLElement (element that will be shown / hidden and populated with settings),
    localStorageKey: <string> | nullish (for no persistence),
    settings: [
      {
        type: SettingType,
        
        if type in SettingType.{ BOOLEAN, ENUM, INTEGER, NUMBER, TEXT }:
          name: <string>,
          displayName: <string> | nullish,
          if localStorageKey != nullish:
            forceNonPersistent: <boolean, if true then this property will not be saved persistently regardless>,
          visibility: {
            func: <function() -> boolean; true for setting to be visible, false otherwise>,
            updateOn: [
              <string, containing name of a setting, if the referenced setting is changed, then this visibility function will be called to re-assess the visibility>,
              ...
            ] | SettingVisibility.ALL_EXCLUDING_OWN (to call this function to re-assess the visibility on the update of any setting  except this one) | SettingVisibility.ALL (to call this function to re-assess the visibility on the update of any setting including this one),
          } | nullish,
          updateValidator: <
            function(newValue, oldValue: <null if no old value>) -> (nullish | {} (only if oldValue is not null) | { adjustedNewValue })
            to validate data update, passed in new value of data
            return value:
              nullish (if data valid),
              OR
              {
                adjustedNewValue: new value to set field to | can omit to revert field to old value,
              },
          > | nullish,
          onUpdate: <function(data: <type is type of settings[i].defaultValue>) -> undefined; called on data update, passed new value of data> | nullish,
          
          if type == SettingType.BOOLEAN:
            defaultValue: <boolean>,
          if type == SettingType.ENUM:
            values: [
              {
                name: <string>,
                displayName: <string> | nullish,
              },
              ...
            ],
            valuesReference: {
              enum: <Enum, all properties of enum must be in values array with no extra properties in values array>,
              requireSameOrderAsEnum: <boolean, if true, values must be in same order as provided enum>,
            } | nullish,
            uiMode: SettingEnumUIType,
            defaultValue: <string>,
          if type == SettingType.INTEGER:
            min: <integer> | nullish,
            max: <integer> | nullish,
            sliderPresent: <boolean> | nullish (default false),
            if sliderPresent == true:
              sliderMin: <integer> (if sliderMapping == nullish) | nullish,
              sliderMax: <integer> (if sliderMapping == nullish) | nullish,
              sliderMapping: {
                sliderToValue: <function(sliderPosition: integer) -> integer (value); that takes integer from 0 to sliderIncrements representing slider position and outputs value of setting>,
                valueToSlider: <function(value: integer) -> integer (sliderPosition); that takes value of setting and outputs integer from 0 to sliderIncrements representing slider position>,
                sliderIncrements: <integer > 0>,
              } | nullish (if present, sliderMin and sliderMax cannot be defined),
              largeSliderAndNumberBox: <boolean, if true, slider and number box both are width of full line> | nullish (default false),
              sliderDraggingIsUpdate: <boolean, if true, dragging slider will call onUpdate, if false, onUpdate will only be called once slider is let go> | nullish (default false),
            defaultValue: <integer>,
          if type == SettingType.NUMBER:
            min: <number> | nullish,
            max: <number> | nullish,
            infinityAcceptable: <boolean> (if either min or max is not defined) | nullish (if min and max are both defined; then infinityAcceptable is automatically false),
            nanAcceptable: <boolean>,
            sliderPresent: <boolean> | nullish (default false),
            if sliderPresent == true:
              sliderMin: <number> (if sliderMapping == nullish) | nullish,
              sliderMax: <number> (if sliderMapping == nullish) | nullish,
              sliderStepSize: <number: 0 <= x < Infinity> | nullish (default 0),
              sliderMapping: {
                sliderToValue: <function(sliderPosition: number) -> number (value); that takes number from 0 to 1 representing slider position and outputs value of setting>,
                valueToSlider: <function(value: number) -> number (sliderPosition); that takes value of setting and outputs number from 0 to 1 representing slider position>,
                sliderIncrements: <integer > 0> | Infinity,
              } | nullish (if present, sliderMin and sliderMax cannot be defined),
              largeSliderAndNumberBox: <boolean, if true, slider and number box both are width of full line> | nullish (default false),
              sliderDraggingIsUpdate: <boolean, if true, dragging slider will call onUpdate, if false, onUpdate will only be called once slider is let go> | nullish (default false),
            defaultValue: <number>,
          if type == SettingType.TEXT:
            multiline: <
              boolean
              if true:
                multiline input field will be used
                WARNING: The carriage return character ('\r') is silently converted to a newline ('\n') when setting the .value property of the underlying textarea. This is an underlying feature of the behavior of a textarea and is largely unavoidable. Calling SettingsManager.set(settingName, <string>) on a string with carriage returns will work and can even be read back using SettingsManager.get(), however, any user-inputted update to the textarea will silently convert the carriage returns to newlines as they were converted to newlines implicitly in the textarea anyway.
              if false:
                single line input field will be used
                newline characters are not allowed in value
            >,
            defaultValue: <string>,
        
        if type == SettingType.{ HEADER, INFO_TEXT }:
          text: <string>,
        if type == SettingType.BUTTON:
          text: <string>,
          onClick: <function() -> undefined; called on button click>,
      },
      ...
    ],
  }

SettingsManager > constructor (after parsing):
  {
    button: HTMLElement (button for toggling settings),
    div: HTMLElement (element that will be shown / hidden and populated with settings),
    localStorageKey: <string> | null (for no persistence),
    settingsMap: Map [
      [
        <string: name>,
        {
          type: SettingType in SettingType.{ BOOLEAN, ENUM, INTEGER, NUMBER, TEXT },
          
          displayName: <string>,
          if localStorageKey != null:
            forceNonPersistent: <boolean, if true then this property will not be saved persistently regardless>,
          updateValidator: <
            function(newValue, oldValue: <null if no old value>) -> (null | {} (only if oldValue is not null) | { adjustedNewValue })
            to validate data update, passed in new value of data
            return value:
              null (if data valid),
              OR
              {
                adjustedNewValue: new value to set field to | can omit to revert field to old value,
              },
          > | null,
          onUpdate: <function(data: <type is type of settings[i].defaultValue>) -> undefined; called on data update, passed new value of data> | null,
          
          if type == SettingType.BOOLEAN:
            defaultValue: <boolean>,
            value: <boolean> (TODO),
          if type == SettingType.ENUM:
            values: [
              <string: name>,
              ...
            ],
            valuesSet: Set [
              <string: name>,
              ...
            ],
            defaultValue: <string>,
            value: <boolstringean> (TODO),
          if type == SettingType.INTEGER:
            min: <integer>,
            max: <integer>,
            defaultValue: <integer>,
            value: <integer> (TODO),
          if type == SettingType.NUMBER:
            min: <number> | null,
            max: <number> | null,
            infinityAcceptable: <boolean>,
            nanAcceptable: <boolean>,
            defaultValue: <number>,
            value: <number> (TODO),
          if type == SettingType.TEXT:
            multiline: <
              boolean
              if true:
                multiline input field will be used
                WARNING: The carriage return character ('\r') is silently converted to a newline ('\n') when setting the .value property of the underlying textarea. This is an underlying feature of the behavior of a textarea and is largely unavoidable. Calling SettingsManager.set(settingName, <string>) on a string with carriage returns will work and can even be read back using SettingsManager.get(), however, any user-inputted update to the textarea will silently convert the carriage returns to newlines as they were converted to newlines implicitly in the textarea anyway.
              if false:
                single line input field will be used
                newline characters are not allowed in value
            >,
            defaultValue: <string>,
            value: <string> (TODO),
        },
      ],
      ...
    ],
    settingsUiPropertiesMap: Map [
      [
        <string: name>,
        {
          displayName: <string>,
          visibility: {
            func: <function() -> boolean; true for setting to be visible, false otherwise>,
            updateOn: Set [
              <string, containing name of a setting, if the referenced setting is changed, then this visibility function will be called to re-assess the visibility>,
              ...
            ] | SettingVisibility.ALL_EXCLUDING_OWN (to call this function to re-assess the visibility on the update of any setting  except this one) | SettingVisibility.ALL (to call this function to re-assess the visibility on the update of any setting including this one),
          } | null,
          if type == SettingType.ENUM:
            valueNames: Map [
              [ <string: name>, displayName: <string: displayName> ],
              ...
            ],
            uiMode: SettingEnumUIType,
          if type == SettingType.INTEGER:
            sliderPresent: <boolean>,
            if sliderPresent == true:
              sliderMin: <integer>,
              sliderMax: <integer>,
              sliderMapping: {
                sliderToValue: <function(sliderPosition: integer) -> integer (value); that takes integer representing slider position and outputs value of setting>,
                valueToSlider: <function(value: integer) -> integer (sliderPosition); that takes value of setting and outputs number from 0 to 1 representing slider position>,
                sliderIncrements: <integer > 0>,
              } | null (if present, sliderMin and sliderMax cannot be defined),
              largeSliderAndNumberBox: <boolean, if true, slider and number box both are width of full line>,
              sliderDraggingIsUpdate: <boolean, if true, dragging slider will call onUpdate, if false, onUpdate will only be called once slider is let go>,
          if type == SettingType.NUMBER:
            sliderPresent: <boolean>,
            if sliderPresent == true:
              sliderMin: <number>,
              sliderMax: <number>,
              sliderStepSize: <number: 0 <= x < Infinity>,
              sliderMapping: {
                sliderToValue: <function(sliderPosition: number) -> number (value); that takes number from 0 to 1 representing slider position and outputs value of setting>,
                valueToSlider: <function(value: number) -> number (sliderPosition); that takes value of setting and outputs number from 0 to 1 representing slider position>,
                sliderIncrements: <integer > 0> | Infinity,
              } | null (if present, sliderMin and sliderMax cannot be defined),
              largeSliderAndNumberBox: <boolean, if true, slider and number box both are width of full line>,
              sliderDraggingIsUpdate: <boolean, if true, dragging slider will call onUpdate, if false, onUpdate will only be called once slider is let go>,
        },
      ],
      ...
    ],
    uiEntries: [
      type: <SettingType in SettingType in SettingType.{ SEPARATOR, HEADER, INFO_TEXT, BUTTON }> | null (for other SettingType values),
      if type == null:
        name: <string key in settingsMap>,
      if type == SettingType.{ HEADER, INFO_TEXT }:
        text: <string>,
      if type == SettingType.BUTTON:
        text: <string>,
        onClick: <function() -> undefined; called on button click>,
    ],
  }
